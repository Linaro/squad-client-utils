#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim: set ts=4
#
# Copyright 2022-present Linaro Limited
#
# SPDX-License-Identifier: MIT


import argparse
import difflib
import json
import logging
import os
import re
import sys
import subprocess as sp
from calendar import monthrange
from collections import defaultdict
from datetime import datetime, timedelta, date
from multiprocessing import Pool
from squad_client.core.api import SquadApi
from squad_client.core.models import Squad, ALL, Test
from squad_client.shortcuts import download_tests as download
from squad_client.shortcuts import get_build
from squad_client.utils import getid

squad_host_url = "https://qa-reports.linaro.org/"
SquadApi.configure(cache=3600, url=os.getenv("SQUAD_HOST",squad_host_url))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

KNOWN_ARCHITECTURES = [
        "arc",
        "arm",
        "arm64",
        "i386",
        "mips",
        "parisc",
        "powerpc",
        "riscv",
        "s390",
        "sh",
        "sparc",
        "x86_64",
]

KNOWN_DEVICES = [
        "bcm2711-rpi-4-b",
        "dragonboard-410c",
        "dragonboard-820c",
        "dragonboard-845c",
        "fvp-aemva",
        "hi6220-hikey",
        "i386",
        "juno-r2",
        "nxp-ls2088",
        "qemu_arm",
        "qemu_arm64",
        "qemu_i386",
        "qemu_x86_64",
        "qemu-arm64",
        "qemu-arm64be",
        "qemu-armv5",
        "qemu-armv7",
        "qemu-armv7be",
        "qemu-i386",
        "qemu-mips32",
        "qemu-mips32el",
        "qemu-mips64",
        "qemu-mips64el",
        "qemu-ppc32",
        "qemu-ppc64",
        "qemu-ppc64le",
        "qemu-riscv32",
        "qemu-riscv64",
        "qemu-s390",
        "qemu-sh4",
        "qemu-sparc64",
        "qemu-x86_64",
        "x15",
        "x86",
        ]

def parse_args():
    parser = argparse.ArgumentParser(description="Compare builds within SQUAD")

    parser.add_argument(
            "--group",
            required=True,
            help="squad group",
            )

    parser.add_argument(
            "--project",
            required=True,
            help="squad project",
            )

    parser.add_argument(
            "--from-datetime",
            required=True,
            help="Starting date time. Example: 2022-01-01 or 2022-01-01T00:00:00",
            )

    parser.add_argument(
            "--to-datetime",
            required=True,
            help="Ending date time. Example: 2022-12-31 or 2022-12-31T00:00:00",
            )

    parser.add_argument(
            "--filename", help="Name of the output file where results will be written"
            )

    parser.add_argument(
            "--debug",
            action="store_true",
            default=False,
            help="Display debug messages",
            )

    return parser.parse_args()


def get_number_of_kernel_builts(project, builds):
    suite = project.suite("build")
    envs = project.environments(count=ALL)
    archs = set()
    total = 0
    for build in builds:
        logger.debug(f"Fetching build test from {build.version}")
        tests = build.tests(suite=suite.id, fields="id,environment").values()
        total += len(tests)

        for test in tests:
            for known_arches in KNOWN_ARCHITECTURES:
                env = envs[getid(test.environment)].slug
                if known_arches in env:
                    archs.add(env)
            #archs.add(envs[getid(test.environment)].slug)

    return total, archs


def get_devices(environments, archs):
    devs = set(environments)

    logger.debug(f"All environments {devs}")
    actual_devices = set()
    for dev in devs:
        for known_device in KNOWN_DEVICES:
            if known_device in dev:
                actual_devices.add(known_device)

    return actual_devices


def get_total_number_of_tests(builds):
    total = 0
    for build in builds:
        total += build.status.tests_total

    return total


def run():
    args = parse_args()
    if args.debug:
        logger.setLevel(level=logging.DEBUG)

    from_datetime = args.from_datetime
    if "T" not in from_datetime:
        from_datetime = f"{from_datetime}T00:00:00"

    to_datetime = args.to_datetime
    if "T" not in to_datetime:
        to_datetime = f"{to_datetime}T23:59:59"

    group = Squad().group(args.group)
    project = group.project(args.project)
    environments = project.environments(count=ALL).values()


    json_dir = 'stored_jsons'
    if not os.path.exists(json_dir):
        os.makedirs(json_dir)
        print(f"Created dir: {json_dir}")

    from_date = from_datetime.split('T')[0]
    to_date = to_datetime.split('T')[0]

    from_year = int(from_date.split("-")[0])
    from_month = int(from_date.split("-")[1])
    from_day = int(from_date.split("-")[2])
    to_year = int(to_date.split("-")[0])
    to_month = int(to_date.split("-")[1])
    to_day = int(to_date.split("-")[2])

    reset_to_januari = True
    first_from_day = True
    a = []
    kernel_pushes = []
    kernel_builts = []
    num_tests = []
    architectures = set()
    devices = set()
    filename = args.filename or f'{json_dir}/stats-{args.group}-{args.project}.json'
            #if os.path.isfile(filename):
    if os.path.isfile(filename):
        with open(filename, "r") as infile:
            a = json.load(infile)

    for year in range(from_year, to_year + 1):
        if year != from_year and reset_to_januari:
            from_month = 1
            reset_to_januari = False

        for month in range(from_month, 13):
            if first_from_day:
                first_from_day = False
                from_time = f"T{from_datetime.split('T')[1]}"
            else:
                from_day = 1
                from_time = f"T00:00:00"
            tmp_from_date = date(year, month, from_day)
            tmp_to_date = date(year, month, monthrange(year, month)[1])
            if year == to_year and month == to_month:
                tmp_to_date = date(year, month, to_day)
                to_time = f"T{to_datetime.split('T')[1]}"
            else:
                to_time = f"T23:59:59"


            # if data already exists
            ask_squad = True
            for entry in a:
                if (entry['from_datetime'] == f"{tmp_from_date}{from_time}"
                        and entry['to_datetime'] == f"{tmp_to_date}{to_time}"):
                    kernel_pushes.append(entry['kernel pushes'])
                    kernel_builts.append(entry['kernel builts'])
                    num_tests.append(entry['tests'])
                    architectures.update(set(entry['architectures']))
                    devices.update(set(entry['devices']))
                    ask_squad = False
                    logger.debug(f"Found dates, from_datetime: {tmp_from_date}{from_time}, to_datetime: {tmp_to_date}{to_time}")
                    break

            if ask_squad:
                logger.debug(f"Fetching builds, from_datetime: {tmp_from_date}{from_time}, to_datetime: {tmp_to_date}{to_time}")
                builds = project.builds(created_at__lt=f"{tmp_to_date}{to_time}", created_at__gt=f"{tmp_from_date}{from_time}", count=ALL).values()
                number_of_kernel_builts, archs = get_number_of_kernel_builts(project, builds)
                devs = get_devices([e.slug for e in environments], archs)
                total_tests = get_total_number_of_tests(builds)

                d = defaultdict(dict)
                d['from_datetime'] = f"{tmp_from_date}{from_time}"
                d['to_datetime'] = f"{tmp_to_date}{to_time}"
                d['kernel pushes'] = len(builds)
                d['kernel builts'] = number_of_kernel_builts
                d['tests'] = total_tests
                d['architectures'] = list(sorted(archs))
                d['devices'] = list(sorted(devs))
                a.append(d)

                kernel_pushes.append(len(builds))
                kernel_builts.append(number_of_kernel_builts)
                num_tests.append(total_tests)
                architectures.update(sorted(archs))
                devices.update(sorted(devs))

            if year == to_year and month == to_month:
                break


    total_kernel_pushes = 0
    for build in kernel_pushes:
        total_kernel_pushes += build
    total_kernel_builts = 0
    for kernel in kernel_builts:
        total_kernel_builts += kernel
    total_tests = 0
    for tests in num_tests:
        total_tests += tests
    archs_str = "\n           ".join(sorted(architectures))
    devices_str = "\n           ".join(sorted(devices))
    report = f"""
        project:       {project.slug}
        from:          {from_datetime}
        to:            {to_datetime}
        kernel pushes: {total_kernel_pushes}
        kernel builts: {total_kernel_builts}
        total tests:   {total_tests}
        architectures:
           {archs_str}
        devices:
           {devices_str}"""
    print(report)
    with open(filename, "w") as outfile:
        outfile.write(json.dumps(a, indent=4))
    #print(json.dumps(a, indent=4))
    sys.exit(1)


if __name__ == "__main__":
    sys.exit(run())
