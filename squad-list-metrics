#!/usr/bin/env python3

import argparse
import json
import logging
import sys
from squad_client.core.api import SquadApi
from squad_client.core.models import Squad, ALL
from squad_client.utils import getid

SquadApi.configure(cache=3600, url="https://qa-reports.linaro.org/")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def arg_parser():
    parser = argparse.ArgumentParser(description="List all of the metrics for a squad build")

    parser.add_argument(
        "--group",
        required=True,
        help="squad group",
    )

    parser.add_argument(
        "--project",
        required=True,
        help="squad project",
    )

    parser.add_argument(
        "--build",
        required=True,
        help="squad build",
    )

    return parser

def run():
    args = arg_parser().parse_args()

    group = Squad().group(args.group)
    if group is None:
        logger.error(f"Get group failed. Group not found: '{args.group}'.")
        return -1

    project = group.project(args.project)
    if project is None:
        logger.error(f"Get project failed. Project not found: '{args.project}'.")
        return -1

    build = project.build(args.build)
    if build is None:
        logger.error(f"Get build failed. Build not found: '{args.build}'.")
        return -1

    environments = project.environments(count=ALL, ordering="slug")
    if not environments:
        logger.error(f"Get environments failed. No environments found.")
        return -1

    suites = project.suites(count=ALL, ordering="slug")
    if not suites:
        logger.error(f"Get suites failed. No suites found.")
        return -1

    filters = {
        "metadata__suite": "build",
    }
    metrics=sorted(build.metrics(count=ALL, **filters).values(), key=lambda m: m.short_name)
    if not metrics:
        logger.error(f"Get metrics failed. No metrics found.")
        return -1

    flat=[]
    for metric in metrics:
        flat.append({
            "id": metric.id,
            "short_name": metric.short_name,
            "build": build.version,
            "environment": environments[getid(metric.environment)].slug,
            "suite": suites[getid(metric.suite)].slug,
            "result": metric.result,
            "unit": metric.unit,
            "is_outlier": metric.is_outlier,
        })

    print(json.dumps(flat, indent=2))

if __name__ == "__main__":
    sys.exit(run())
