#!/usr/bin/env python3

import argparse
import json
import logging
import sys

from squad_client.core.api import SquadApi
from squad_client.core.models import Squad

SquadApi.configure(cache=3600, url="https://qa-reports.linaro.org/")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def arg_parser():
    parser = argparse.ArgumentParser(
        description="List all changes for a squad build, compared to a base build"
    )

    parser.add_argument(
        "--group",
        required=True,
        help="squad group",
    )

    parser.add_argument(
        "--project",
        required=True,
        help="squad project",
    )

    parser.add_argument(
        "--build",
        required=True,
        help="squad build",
    )

    parser.add_argument(
        "--base-build",
        required=True,
        help="squad build to compare to",
    )

    return parser


def run():
    args = arg_parser().parse_args()

    group = Squad().group(args.group)
    if group is None:
        logger.error(f"Get group failed. Group not found: '{args.group}'.")
        return -1

    project = group.project(args.project)
    if project is None:
        logger.error(f"Get project failed. Project not found: '{args.project}'.")
        return -1

    build = project.build(args.build)
    if build is None:
        logger.error(f"Get build failed. Build not found: '{args.build}'.")
        return -1

    base_build = project.build(args.base_build)
    if base_build is None:
        logger.error(f"Get base build failed. Build not found: '{args.base_build}'.")
        return -1

    changes = project.compare_builds(base_build.id, build.id, force=True)
    regressions = changes["regressions"]
    if not regressions:
        logger.debug("No regressions found.")

    fixes = changes["fixes"]
    if not fixes:
        logger.debug("No fixes found.")

    flat = []
    for environment in regressions.keys():
        for suite, tests in regressions[environment].items():
            for test in tests:
                flat.append(
                    {
                        "group": group.slug,
                        "project": project.slug,
                        "build": build.version,
                        "base_build": base_build.version,
                        "environment": environment,
                        "suite": suite,
                        "test": test,
                        "change": "regression",
                    }
                )

    for environment in fixes.keys():
        for suite, tests in fixes[environment].items():
            for test in tests:
                flat.append(
                    {
                        "group": group.slug,
                        "project": project.slug,
                        "build": build.version,
                        "base_build": base_build.version,
                        "environment": environment,
                        "suite": suite,
                        "test": test,
                        "change": "fix",
                    }
                )

    print(json.dumps(flat, indent=2))


if __name__ == "__main__":
    sys.exit(run())
