#!/usr/bin/python3
# -*- coding: utf-8 -*-
# vim: set ts=4
#
# Copyright 2022-present Linaro Limited
#
# SPDX-License-Identifier: MIT


import argparse
import difflib
import json
import logging
import os
import re
import sys
import subprocess as sp
from multiprocessing import Pool
from squad_client.core.api import SquadApi
from squad_client.core.models import Squad
from squad_client.shortcuts import download_tests as download
from squad_client.shortcuts import get_build

squad_host_url = "https://qa-reports.linaro.org/"
SquadApi.configure(cache=3600, url=os.getenv("SQUAD_HOST",squad_host_url))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def parse_args():
    parser = argparse.ArgumentParser(description="Compare builds within SQUAD")

    parser.add_argument(
        "--group",
        required=True,
        help="squad group",
    )

    parser.add_argument(
        "--project",
        required=True,
        help="squad project",
    )

    parser.add_argument(
        "--build",
        required=True,
        help="squad build",
    )

    parser.add_argument(
        "--environments", help="Filter on environments (separated by ',')"
    )

    parser.add_argument(
        "--suites", help="Filter on suites (separated by ',')"
    )

    parser.add_argument(
        "--filename", help="Name of the output file where results will be written"
    )

    parser.add_argument(
        "--debug",
        action="store_true",
        default=False,
        help="Display debug messages",
    )

    return parser.parse_args()

def download_tests(param):
    logger.debug(f"param: {param}")
    project, build, environments, suites, output_filename = param
    download(project, build, environments, suites, "{test.environment.slug}/{test.test_run.metadata.build_name}/{test.name} {test.status}", output_filename,)


def run():
    args = parse_args()
    if args.debug:
        logger.setLevel(level=logging.DEBUG)

    groups = args.group.split(',')
    base_group = Squad().group(groups[0])
    if base_group is None:
        logger.error(f"Get group failed. Group not found: '{args.group.split(',')[0]}'.")
        return -1
    if len(groups) > 1:
        other_group = Squad().group(groups[1])
        if other_group is None:
            logger.error(f"Get group failed. Group not found: '{args.group.split(',')[1]}'.")
            return -1
    else:
        other_group = base_group

    projects = args.project.split(',')
    base_project = base_group.project(projects[0])
    if base_project is None:
        logger.error(f"Get project failed. project not found: '{args.project.split(',')[0]}'.")
        return -1
    if len(projects) > 1:
        other_project = other_group.project(projects[1])
        if other_project is None:
            logger.error(f"Get project failed. project not found: '{args.project.split(',')[1]}'.")
            return -1
    else:
        other_project = base_project

    builds = args.build.split(',')
    base_build = get_build(builds[0], base_project)
    if base_build is None:
        logger.error(f"Get build failed. build not found: '{args.build.split(',')[0]}'.")
        return -1
    if len(builds) > 1:
        other_build = get_build(builds[1], other_project)
        if other_build is None:
            logger.error(f"Get build failed. build not found: '{args.build.split(',')[1]}'.")
            return -1
    else:
        other_build = base_build

    environments = None
    if args.environments:
        environments = [base_project.environment(e) for e in args.environments.split(",")]

    suites = None
    if args.suites:
        suites = [base_project.suite(s) for s in args.suites.split(",")]

    logger.debug(f'base: {base_group}/{base_project}/{base_build}')
    logger.debug(f'other: {other_group}/{other_project}/{other_build}')

    basefile = f"{base_group.slug}-{base_project.slug}-{base_build.version}".replace('~', '')
    otherfile = f"{other_group.slug}-{other_project.slug}-{other_build.version}".replace('~', '')
    basefile_with_ending = os.path.join(basefile + '.txt')
    otherfile_with_ending = os.path.join(otherfile + '.txt')
    logger.debug(f"base: {basefile}")
    logger.debug(f"other: {otherfile}")
    with Pool(2) as p:
        p.map(download_tests, [
            (base_project, base_build, environments, suites, basefile_with_ending),
            (other_project, other_build, environments, suites, otherfile_with_ending)
        ])

    basefile_open = open(basefile_with_ending, 'r')
    otherfile_open = open(otherfile_with_ending, 'r')
    difference = list(difflib.unified_diff(list(basefile_open.readlines()), list(otherfile_open.readlines()), fromfile=basefile_with_ending, tofile=otherfile_with_ending))
    difference = ''.join(difference)

    filename = args.filename or f'diff-{basefile}-vs-{otherfile}.txt'

    with open(filename, 'w') as fp:
        fp.write(difference)
    print(difference)
    print(f"file created: {filename}")


if __name__ == "__main__":
    sys.exit(run())
