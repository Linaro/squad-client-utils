#!/usr/bin/env python3

import argparse
import json
import logging
import sys
from squad_client.core.api import SquadApi
from squad_client.core.models import Build, Squad
from squad_client.utils import getid

SquadApi.configure(cache=3600, url="https://qa-reports.linaro.org/")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def arg_parser():
    parser = argparse.ArgumentParser(description="List the result history of a test")

    parser.add_argument(
        "--group",
        required=True,
        help="squad group",
    )

    parser.add_argument(
        "--project",
        required=True,
        help="squad project",
    )

    parser.add_argument(
        "--build",
        required=True,
        help="squad build",
    )

    parser.add_argument(
        "--environment",
        required=True,
        help="squad environment",
    )

    parser.add_argument(
        "--suite",
        required=True,
        help="squad suite",
    )

    parser.add_argument(
        "--test",
        required=True,
        help="squad test",
    )

    return parser


def run():
    args = arg_parser().parse_args()

    group = Squad().group(args.group)
    if group is None:
        logger.error(f"Get group failed. Group not found: '{args.group}'.")
        return -1

    project = group.project(args.project)
    if project is None:
        logger.error(f"Get project failed. Project not found: '{args.project}'.")
        return -1

    build = project.build(args.build)
    if build is None:
        logger.error(f"Get build failed. Build not found: '{args.build}'.")
        return -1

    environment = project.environment(args.environment)
    if environment is None:
        logger.error(f"Get environment failed. Environment not found: '{args.environment}'.")
        return -1

    suite = project.suite(args.suite)
    if suite is None:
        logger.error(f"Get suite failed. Suite not found: '{args.suite}'.")
        return -1

    tests = Squad().tests(
        build__created_at__lte=build.created_at,
        environment=environment.id,
        suite=suite.id,
        metadata__name=args.test,
        ordering='-build_id',
        count=30,
    ).values()

    if not tests:
        logger.error(f"Get tests failed. Tests not found: '{args.test}'.")
        return -1

    flat = []
    for test in tests:
        test_build = Build(getid(test.build))
        if test_build is None:
            logger.error(f"Get build failed. Build not found: '{test.build}'.")
            return -1

        flat.append({
            "group": group.slug,
            "project": project.slug,
            "build": test_build.version,
            "environment": environment.slug,
            "suite": suite.slug,
            "test": test.short_name,
            "status": test.status,
            "has_known_issues": test.has_known_issues,
        })

    print(json.dumps(flat, indent=2))


if __name__ == "__main__":
    sys.exit(run())
